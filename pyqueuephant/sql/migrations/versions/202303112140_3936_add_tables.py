"""add tables.

Revision ID: 39366f8219fe
Revises: ee4bbd3a1bb0
Create Date: 2023-03-11 21:40:54.578077

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

from pyqueuephant.sql.tables import job_event_type
from pyqueuephant.sql.tables import job_status_type

# revision identifiers, used by Alembic.
revision = "39366f8219fe"
down_revision = "ee4bbd3a1bb0"
branch_labels = None
depends_on = None


def upgrade() -> None:
    job_status_type.create(op.get_bind(), checkfirst=True)
    job_event_type.create(op.get_bind(), checkfirst=True)
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "pyqueuephant_job",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column(
            "status",
            job_status_type,
            server_default="waiting",
            nullable=False,
        ),
        sa.Column("task_path", sa.String(length=128), nullable=False),
        sa.Column(
            "task_args",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "pyqueuephant_periodic_jobs",
        sa.Column("id", sa.BIGINT(), nullable=False),
        sa.Column("schedule", sa.String(length=255), nullable=False),
        sa.Column("last_deferred", sa.DateTime(timezone=True), nullable=True),
        sa.Column("task_path", sa.String(length=128), nullable=False),
        sa.Column(
            "task_args",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "pyqueuephant_job_dependency",
        sa.Column("id", sa.BIGINT(), nullable=False),
        sa.Column("job_id", sa.UUID(), nullable=False),
        sa.Column("depends_on_job_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["depends_on_job_id"],
            ["pyqueuephant_job.id"],
        ),
        sa.ForeignKeyConstraint(
            ["job_id"],
            ["pyqueuephant_job.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "pyqueuephant_job_event",
        sa.Column("id", sa.BIGINT(), nullable=False),
        sa.Column("job_id", sa.UUID(), nullable=False),
        sa.Column(
            "event",
            job_event_type,
            nullable=False,
        ),
        sa.Column(
            "timestamp",
            sa.DateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["job_id"],
            ["pyqueuephant_job.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "pyqueuephant_job_result",
        sa.Column("id", sa.BIGINT(), nullable=False),
        sa.Column("job_id", sa.UUID(), nullable=False),
        sa.Column("attempt", sa.SMALLINT(), server_default="1", nullable=False),
        sa.Column("result", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["job_id"],
            ["pyqueuephant_job.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("pyqueuephant_job_result")
    op.drop_table("pyqueuephant_job_event")
    op.drop_table("pyqueuephant_job_dependency")
    op.drop_table("pyqueuephant_periodic_jobs")
    op.drop_table("pyqueuephant_job")

    job_event_type.drop(op.get_bind(), checkfirst=True)
    job_status_type.drop(op.get_bind(), checkfirst=True)
    # ### end Alembic commands ###
