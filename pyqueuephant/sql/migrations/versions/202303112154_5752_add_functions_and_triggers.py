"""add functions and triggers.

Revision ID: 575286636698
Revises: 39366f8219fe
Create Date: 2023-03-11 21:54:07.146104

"""

from alembic import op
from alembic_utils.pg_function import PGFunction
from alembic_utils.pg_trigger import PGTrigger

# revision identifiers, used by Alembic.
revision = "575286636698"
down_revision = "39366f8219fe"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_pyqueuephant_job_status_event_changed_procedure = PGFunction(
        schema="public",
        signature="pyqueuephant_job_status_event_changed_procedure()",
        definition="-- CREATE FUNCTION job_status_event_changed_procedure()\nRETURNS TRIGGER\n  LANGUAGE plpgsql\nAS $$\nBEGIN\n  IF TG_OP = 'INSERT' THEN\n    -- INSTERT -> waiting\\: deferred\n    INSERT INTO pyqueuephant_job_event(job_id, event)\n    VALUES (NEW.id, 'deferred');\n    NOTIFY pyqueuephant;\n    RETURN NEW;\n  ELSEIF TG_OP = 'UPDATE' THEN\n    -- waiting -> working\\: started\n    IF OLD.status = 'waiting'::pyqueuephant_job_status_type AND NEW.status = 'working'::pyqueuephant_job_status_type THEN\n      INSERT INTO pyqueuephant_job_event(job_id, event)\n      VALUES (OLD.id, 'started');\n    -- working -> succeeded\\: succeeded\n    ELSIF OLD.status = 'working'::pyqueuephant_job_status_type AND NEW.status = 'succeeded'::pyqueuephant_job_status_type THEN\n      INSERT INTO pyqueuephant_job_event(job_id, event)\n      VALUES (OLD.id, 'succeeded');\n    -- working -> failed\\: failed\n    ELSIF OLD.status = 'working'::pyqueuephant_job_status_type AND NEW.status = 'failed'::pyqueuephant_job_status_type THEN\n      INSERT INTO pyqueuephant_job_event(job_id, event)\n      VALUES (OLD.id, 'failed');\n    -- waiting, working -> waiting\\: deferred_for_retry\n    ELSIF OLD.status IN (\n      'waiting'::pyqueuephant_job_status_type,\n      'working'::pyqueuephant_job_status_type\n     ) AND NEW.status = 'canceled'::pyqueuephant_job_status_type THEN\n      INSERT INTO pyqueuephant_job_event(job_id, event)\n      VALUES (OLD.id, 'canceled');\n    -- working, succeeded, failed, canceled -> waiting\\: deferred_for_retry\n    ELSIF OLD.status IN (\n      'working'::pyqueuephant_job_status_type,\n      'succeeded'::pyqueuephant_job_status_type,\n      'failed'::pyqueuephant_job_status_type,\n      'canceled'::pyqueuephant_job_status_type\n    ) AND NEW.status = 'waiting'::pyqueuephant_job_status_type THEN\n      INSERT INTO pyqueuephant_job_event(job_id, event)\n      VALUES (OLD.id, 'deferred_for_retry');\n    END IF;\n    RETURN NEW;\n  END IF;\nEND;\n$$",
    )
    op.create_entity(public_pyqueuephant_job_status_event_changed_procedure)  # type: ignore

    public_pyqueuephant_job_pyqueuephant_job_status_event_changed_trigger = PGTrigger(
        schema="public",
        signature="pyqueuephant_job_status_event_changed_trigger",
        on_entity="public.pyqueuephant_job",
        is_constraint=False,
        definition="-- CREATE TRIGGER job_status_event_changed_trigger\n  AFTER INSERT OR UPDATE ON pyqueuephant_job\n  FOR EACH ROW\n  EXECUTE PROCEDURE pyqueuephant_job_status_event_changed_procedure ()",
    )
    op.create_entity(  # type: ignore
        public_pyqueuephant_job_pyqueuephant_job_status_event_changed_trigger
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_pyqueuephant_job_pyqueuephant_job_status_event_changed_trigger = PGTrigger(
        schema="public",
        signature="pyqueuephant_job_status_event_changed_trigger",
        on_entity="public.pyqueuephant_job",
        is_constraint=False,
        definition="-- CREATE TRIGGER job_status_event_changed_trigger\n  AFTER INSERT OR UPDATE ON pyqueuephant_job\n  FOR EACH ROW\n  EXECUTE PROCEDURE pyqueuephant_job_status_event_changed_procedure ()",
    )
    op.drop_entity(  # type: ignore
        public_pyqueuephant_job_pyqueuephant_job_status_event_changed_trigger
    )

    public_pyqueuephant_job_status_event_changed_procedure = PGFunction(
        schema="public",
        signature="pyqueuephant_job_status_event_changed_procedure()",
        definition="-- CREATE FUNCTION job_status_event_changed_procedure()\nRETURNS TRIGGER\n  LANGUAGE plpgsql\nAS $$\nBEGIN\n  IF TG_OP = 'INSERT' THEN\n    -- INSTERT -> waiting\\: deferred\n    INSERT INTO pyqueuephant_job_event(job_id, event)\n    VALUES (NEW.id, 'deferred');\n    NOTIFY pyqueuephant;\n    RETURN NEW;\n  ELSEIF TG_OP = 'UPDATE' THEN\n    -- waiting -> working\\: started\n    IF OLD.status = 'waiting'::pyqueuephant_job_status_type AND NEW.status = 'working'::pyqueuephant_job_status_type THEN\n      INSERT INTO pyqueuephant_job_event(job_id, event)\n      VALUES (OLD.id, 'started');\n    -- working -> succeeded\\: succeeded\n    ELSIF OLD.status = 'working'::pyqueuephant_job_status_type AND NEW.status = 'succeeded'::pyqueuephant_job_status_type THEN\n      INSERT INTO pyqueuephant_job_event(job_id, event)\n      VALUES (OLD.id, 'succeeded');\n    -- working -> failed\\: failed\n    ELSIF OLD.status = 'working'::pyqueuephant_job_status_type AND NEW.status = 'failed'::pyqueuephant_job_status_type THEN\n      INSERT INTO pyqueuephant_job_event(job_id, event)\n      VALUES (OLD.id, 'failed');\n    -- waiting, working -> waiting\\: deferred_for_retry\n    ELSIF OLD.status IN (\n      'waiting'::pyqueuephant_job_status_type,\n      'working'::pyqueuephant_job_status_type\n     ) AND NEW.status = 'canceled'::pyqueuephant_job_status_type THEN\n      INSERT INTO pyqueuephant_job_event(job_id, event)\n      VALUES (OLD.id, 'canceled');\n    -- working, succeeded, failed, canceled -> waiting\\: deferred_for_retry\n    ELSIF OLD.status IN (\n      'working'::pyqueuephant_job_status_type,\n      'succeeded'::pyqueuephant_job_status_type,\n      'failed'::pyqueuephant_job_status_type,\n      'canceled'::pyqueuephant_job_status_type\n    ) AND NEW.status = 'waiting'::pyqueuephant_job_status_type THEN\n      INSERT INTO pyqueuephant_job_event(job_id, event)\n      VALUES (OLD.id, 'deferred_for_retry');\n    END IF;\n    RETURN NEW;\n  END IF;\nEND;\n$$",
    )
    op.drop_entity(public_pyqueuephant_job_status_event_changed_procedure)  # type: ignore

    # ### end Alembic commands ###
